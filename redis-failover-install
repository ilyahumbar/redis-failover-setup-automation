#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2015 Microsoft Azure
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script parameters and their defaults
VERSION="3.2.5"
LOGGING_KEY="[account-key]"
REDIS_PORT=6379
SENTINEL_PORT=26379
SENTINEL_QUORUM=2
IS_MASTER_NODE=0
CLEAR_REDIS_INSTALLATION=0
CURRENT_DIRECTORY=$(pwd)

########################################################
# This script will install Redis from sources
########################################################
help()
{
	echo "This script installs and configure Redis server on the Ubuntu machine"
	echo "Available parameters:"
	echo "-v Redis package version"	
	echo "-p Redis port"
	echo "-i Master IP address (required)"
	echo "-m Flag indicating that the current machine is being configured as a master"
	echo "-q Sentinel quorum (default = 2)"
	echo "-w Password to be set to access redis server (required)"
	echo "-r (remove) Flag indicating whether the script removes any existing installed redis instance and all its associated configuration"
	echo "-h Help"
}

#############################################################################
log()
{
	# If you want to enable this logging, uncomment the line below and specify your logging key 
	#curl -X POST -H "content-type:text/plain" --data-binary "$(date) | ${HOSTNAME} | $1" https://logs-01.loggly.com/inputs/${LOGGING_KEY}/tag/redis-extension,${HOSTNAME}
	if [ -n ${2+x} ]; then
		echo -e "${2}${1}${NC}"
	else
		echo "${1}"
	fi
}

#############################################################################
color()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1

#############################################################################
log "Begin execution of Redis installation script extension on ${HOSTNAME}"

if [ "${UID}" -ne 0 ];
then
    log "Script executed without root permissions" $RED
    echo "You must be root to run this program." >&2
    exit 3
fi

# Parse script parameters
while getopts :v:p:i:w:q:mrh optname; do
  log "Option $optname set with value ${OPTARG}"
  
  case $optname in
    v)  # Version to be installed
		VERSION=${OPTARG}
		;;
    p) # Redis port
		REDIS_PORT=${OPTARG}
		SENTINEL_PORT="2${OPTARG}"
		;;
    w) # Redis password
		REDIS_PASS=${OPTARG}
		;;
    i) # Master IP address
		MASTER_IP=${OPTARG}
		;;
    h)  # Helpful hints
		help
		exit 2
		;;
    m)  # Indicator of the master node
		IS_MASTER_NODE=1
		;;
    q)  # Quorum
		SENTINEL_QUORUM=${OPTARG}
		;;
    r)  # remove installed redis instance and associated configuration
		CLEAR_REDIS_INSTALLATION=1
		;;
    \?) #unrecognized option - show help
		echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
		help
		exit 2
		;;
  esac
done

if [ -z "${MASTER_IP+x}" ]; then
    log "Specify master IP using -i option. Additionlay you may want to set -m flag to indicate that the current machine is the master." $RED
    echo "Script executed without master IP (-i) being specified" >&2
    exit 4
fi

if [ -z "${REDIS_PASS+x}" ]; then
    log "Password for redis instance is not specified. Use -w option to specify password. Currently, running this script without redis password is not supported" $RED
    echo "Script executed without password (-w) being specified" >&2
    exit 4
fi

#############################################################################
tune_system()
{
	log "Tuning the system configuration" $GREEN
	
	# Ensure the source list is up-to-date
	color apt-get -y update

	# Add local machine name to the hosts file to facilitate IP address resolution
	if grep -q "${HOSTNAME}" /etc/hosts
	then
	  echo "${HOSTNAME} was found in /etc/hosts"
	else
	  echo "${HOSTNAME} was not found in and will be added to /etc/hosts"
	  # Append it to the hsots file if not there
	  echo "127.0.0.1 $(hostname)" >> /etc/hosts
	  log "Hostname ${HOSTNAME} added to /etc/hosts"
	fi	
}

#############################################################################
tune_memory()
{
	log "Tuning the memory configuration" $GREEN
	
	# Get the supporting utilities
	color apt-get -y install hugepages

	# Resolve a "Background save may fail under low memory condition." warning
	color sysctl vm.overcommit_memory=1

	# Disable the Transparent Huge Pages (THP) support in the kernel
	sudo hugeadm --thp-never
}

#############################################################################
tune_network()
{
	log "Tuning the network configuration" $GREEN
	
>/etc/sysctl.conf cat << EOF 

	# Disable syncookies (syncookies are not RFC compliant and can use too muche resources)
	net.ipv4.tcp_syncookies = 0

	# Basic TCP tuning
	net.ipv4.tcp_keepalive_time = 600
	net.ipv4.tcp_synack_retries = 3
	net.ipv4.tcp_syn_retries = 3

	# RFC1337
	net.ipv4.tcp_rfc1337 = 1

	# Defines the local port range that is used by TCP and UDP to choose the local port
	net.ipv4.ip_local_port_range = 1024 65535

	# Log packets with impossible addresses to kernel log
	net.ipv4.conf.all.log_martians = 1

	# Disable Explicit Congestion Notification in TCP
	net.ipv4.tcp_ecn = 0

	# Enable window scaling as defined in RFC1323
	net.ipv4.tcp_window_scaling = 1

	# Enable timestamps (RFC1323)
	net.ipv4.tcp_timestamps = 1

	# Enable select acknowledgments
	net.ipv4.tcp_sack = 1

	# Enable FACK congestion avoidance and fast restransmission
	net.ipv4.tcp_fack = 1

	# Allows TCP to send "duplicate" SACKs
	net.ipv4.tcp_dsack = 1

	# Controls IP packet forwarding
	net.ipv4.ip_forward = 0

	# No controls source route verification (RFC1812)
	net.ipv4.conf.default.rp_filter = 0

	# Enable fast recycling TIME-WAIT sockets
	net.ipv4.tcp_tw_recycle = 1
	net.ipv4.tcp_max_syn_backlog = 20000

	# How may times to retry before killing TCP connection, closed by our side
	net.ipv4.tcp_orphan_retries = 1

	# How long to keep sockets in the state FIN-WAIT-2 if we were the one closing the socket
	net.ipv4.tcp_fin_timeout = 20

	# Don't cache ssthresh from previous connection
	net.ipv4.tcp_no_metrics_save = 1
	net.ipv4.tcp_moderate_rcvbuf = 1

	# Increase Linux autotuning TCP buffer limits
	net.ipv4.tcp_rmem = 4096 87380 16777216
	net.ipv4.tcp_wmem = 4096 65536 16777216

	# increase TCP max buffer size
	net.core.rmem_max = 16777216
	net.core.wmem_max = 16777216
	net.core.netdev_max_backlog = 2500

	# Increase number of incoming connections
	net.core.somaxconn = 65000
EOF

	# Reload the networking settings
	/sbin/sysctl -p /etc/sysctl.conf
}

#############################################################################
install_redis()
{
	if [ "$CLEAR_REDIS_INSTALLATION" -eq 1 ]; then
		log "Removing existing redis instance and associated configuration..."
		rm /usr/local/bin/redis-*
		rm -r /etc/redis/
		rm /var/log/redis-*
		rm -r /var/redis/
		rm /etc/supervisor/conf.d/redis-*
		log "Cleaned up" $GREEN
	fi

	log "Installing Redis v${VERSION}"

	color wget http://download.redis.io/releases/redis-$VERSION.tar.gz
	color tar xzf redis-$VERSION.tar.gz
	cd redis-$VERSION

	printf '%s\n' "${PWD##*/}"

	if test -f "/usr/local/bin/redis-server"; then 
	    log "Redis has been already installed. Use -r option to remove existing instance" $YELLOW
	    return 0
	fi

	# Installing build essentials (if missing) and other required tools
	color apt-get -y install build-essential

	color make
	color make install prefix=/usr/local/bin/

	log "Redis package v${VERSION} was downloaded and built successfully" $GREEN
	return 1
}

#############################################################################
cleanup_setup()
{
	# Clean up temporary files
	cd $CURRENT_DIRECTORY
	color rm redis-$VERSION -R
	color rm redis-$VERSION.tar.gz
}

#############################################################################
install_supervisord()
{
	log "Installing Supervisord (latest distribution package available)"

	# Installing build essentials (if missing) and other required tools
	color apt-get -y install supervisor

	log "Supervisord package was installed successfully"  $GREEN
}

#############################################################################
configure_redis()
{
	# Create all essentials directories and copy files to the correct locations
	color mkdir -p /etc/redis/${REDIS_PORT}
	color mkdir -p /var/redis/${REDIS_PORT}

	# Configure the general settings (take template file, substitute variables, append to redis.conf, copy to etc)
	color cp redis.conf /etc/redis/${REDIS_PORT}/redis.conf
	color sed -e "s/\${REDIS_PORT}/${REDIS_PORT}/" -e "s/\${REDIS_PASS}/${REDIS_PASS}/" $CURRENT_DIRECTORY/templates/redis.conf >> /etc/redis/${REDIS_PORT}/redis.conf
	
	# Copy the cluster configuration utility (if exists)
	if [ -f src/redis-trib.rb ]; then
		color cp src/redis-trib.rb /usr/local/bin/
	fi

	log "Redis configuration was applied successfully"  $GREEN
}

#############################################################################
configure_redis_replication()
{
	log "Configuring master-slave replication"

	if [ "$IS_MASTER_NODE" -eq 1 ]; then
		log "Redis node ${HOSTNAME} is considered a MASTER, no further configuration changes are required" $GREEN
	else
		log "Redis node ${HOSTNAME} is considered a SLAVE, additional configuration changes will be made"
	
		echo "slaveof ${MASTER_IP} ${REDIS_PORT}" >> /etc/redis/${REDIS_PORT}/redis.conf
		log "Redis node ${HOSTNAME} is configured as a SLAVE of ${MASTER_IP}:${REDIS_PORT}" $GREEN
	fi	
}

#############################################################################
configure_supervisor()
{
	log "creating cpnfiguration files for supervisor"
	# Supervisor configuration for redis server
	color sed -e "s/\${REDIS_PORT}/${REDIS_PORT}/" $CURRENT_DIRECTORY/templates/redis-server.supervisord.conf > /etc/supervisor/conf.d/redis-server-${REDIS_PORT}.conf
	
	# Supervisor configuration for redis sentinel
	color sed -e "s/\${REDIS_PORT}/${REDIS_PORT}/" $CURRENT_DIRECTORY/templates/redis-sentinel.supervisord.conf > /etc/supervisor/conf.d/redis-sentinel-${REDIS_PORT}.conf
}

#############################################################################
configure_sentinel()
{
	log "Configuring redis sentinel"

	# Configure the sentinel bits (take template file, substitute variables, append to redis.conf, copy to etc)
	color cp sentinel.conf /etc/redis/${REDIS_PORT}/sentinel.conf

	# Patch the sentinel configuration file with a new master
	color sed -i "s/^sentinel monitor.*$/sentinel monitor mymaster ${MASTER_IP} ${REDIS_PORT} ${SENTINEL_QUORUM}/g" /etc/redis/${REDIS_PORT}/sentinel.conf

	# Additional sentinel configuration from template
	color sed -e "s/\${SENTINEL_PORT}/${SENTINEL_PORT}/" -e "s/\${REDIS_PASS}/${REDIS_PASS}/" ../templates/sentinel.conf >> /etc/redis/${REDIS_PORT}/sentinel.conf
}

#############################################################################
configure_permissions()
{
	# Create service user and configure for permissions
	useradd -r -s /bin/false redis

	# Change owner for /etc/redis/ to allow sentinel change the configuration files
	chown -R redis.redis /etc/redis/
	chown -R redis.redis /var/redis/

	# Make log files writable
	color touch /var/log/redis-${REDIS_PORT}.log
	color chown redis:redis /var/log/redis-${REDIS_PORT}.log
	color chmod u+w /var/log/redis-${REDIS_PORT}.log

	color touch /var/log/redis-sentinel-${SENTINEL_PORT}.log
	color chown redis:redis /var/log/redis-sentinel-${SENTINEL_PORT}.log
	color chmod u+w /var/log/redis-sentinel-${SENTINEL_PORT}.log
}

#############################################################################
restart_supervisor()
{
	#restart supervisor for confguration to take effect
	service supervisor restart
	log "Supervisor was restarted successfully" $GREEN
}


# Step1
tune_system
tune_memory
#tune_network

# Step 2
install_redis
install_supervisord

# Step 3
configure_supervisor
configure_redis
configure_redis_replication
configure_sentinel
configure_permissions

# Step 4
cleanup_setup

# Step 5
restart_supervisor
